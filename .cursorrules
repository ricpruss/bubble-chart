# Cursor Rules - Bubble Chart TypeScript Library

## Core Principles
- No apologies or thanks
- Make your tone very British, educated, precise, avoid embarrassment
- Verify before claiming success
- Preserve existing functionality
- Minimal diffs
- Make sure we do not reimpliment something D3 already does. This is supposed to be a high level API of the same fluent style as D3 but not reimplimenting things.

## **üñ•Ô∏è DEVELOPMENT SERVER**
**NEVER start servers** - User always runs `npm run dev` (Vite server)
- Examples accessible at `http://localhost:3333/examples/`
- Browser tests at `http://localhost:3333/examples/tests/`
- No need for `python -m http.server` or other servers

**Test Commands:**
```bash
npm run test
```

## TypeScript Standards
- Strict mode enabled
- Explicit types over inference for public APIs
- Generic constraints for data transformations
- Interface-first design, avoid union types for config
- Runtime validation with type guards where needed


## Architecture Patterns
- Compositional over inheritance
- Method chaining with typed returns: `method(): this`
- Builder pattern for configuration
- Centralized error handling with meaningful messages
- Resource cleanup (timers, listeners) in destroy methods

## Code Quality
- **DRY**: Extract common logic, single source of truth
- **KISS**: Simplest solution that works
- **YAGNI**: Don't build unused features
- **Boy Scout**: Leave code cleaner
- **Least Astonishment**: Predictable behavior

## File Organization
- `.ts` in `src/`, barrel exports in `index.ts`
- ES modules only, explicit imports/exports
- Small incremental changes
- Test changes before commit

## Performance & Memory
- Cache expensive calculations
- Minimize DOM manipulations
- Clean up D3 resources (timers, simulations)
- Type guards for better V8 optimization

## Error Handling
```typescript
// Runtime validation
function isValidData(obj: unknown): obj is DataType {
  return typeof obj === 'object' && obj !== null && 'requiredProp' in obj;
}

// Try-catch with context
try {
  // operation
} catch (error) {
  throw new Error(`Operation failed: ${error.message}`);
}
```

## Documentation
- JSDoc for public APIs with `@param`, `@returns`
- Interface properties documented
- Usage examples for complex types

## Anti-Patterns
- `any` type without justification
- `@ts-ignore` without detailed comments  
- Mutating readonly data
- Memory leaks (uncleaned timers/listeners)
- Success claims without build verification
- Breaking changes to public APIs
- Premature optimization

## Build Requirements
- Must run `npm run build` after changes
- Verify generated `.d.ts` files exist
- Test examples in TypeScript mode

## Testing Requirements
- **Always run tests** after any change: `npm run test
 